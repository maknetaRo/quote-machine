{"version":3,"sources":["assets/images/Benjamin-Franklin.jfif","assets/images/Nelson-Mandela.jpg","assets/images/Eleanor-Roosevelt.jfif","assets/images/Arystoteles.jfif","assets/images/Walt_Disney_1946.JPG","assets/images/James-Cameron-2012.jpg","constants.js","components/Quote/Quote.js","components/Card/Card.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QUOTES","quote","name","background","src","require","Quote","useState","counter","setCounter","onClick","event","className","length","library","add","faQuoteLeft","fas","Card","style","backgroundColor","icon","size","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,kGCA9BC,EAAS,CACpB,CACEC,MACE,yEACFC,KAAM,oBACNC,WAAY,UACZC,IAAKC,EAAQ,KAEf,CACEJ,MACE,4FACFC,KAAM,iBACNC,WAAY,UACZC,IAAKC,EAAQ,KAEf,CACEJ,MACE,yEACFC,KAAM,oBACNC,WAAY,UACZC,IAAKC,EAAQ,KAEf,CACEJ,MACE,wEACFC,KAAM,YACNC,WAAY,UACZC,IAAKC,EAAQ,KAEf,CACEJ,MAAO,6DACPC,KAAM,cACNC,WAAY,UACZC,IAAKC,EAAQ,KAEf,CACEJ,MACE,2GACFC,KAAM,gBACNC,WAAY,UACZC,IAAKC,EAAQ,MCvBFC,MAdf,WAAkB,IAAD,EACeC,mBAAS,GADxB,mBACRC,EADQ,KACCC,EADD,KAEf,OACE,yBAAKC,QAAS,SAACC,GAAD,OAAWF,EAAWD,EAAU,KAC5C,wBAAII,UAAU,SAASZ,EAAOQ,EAAUR,EAAOa,QAAQZ,OAEvD,yBAAKW,UAAU,OACb,yBAAKA,UAAU,QAAQR,IAAKJ,EAAOQ,EAAUR,EAAOa,QAAQT,MAC5D,wBAAIQ,UAAU,UAAUZ,EAAOQ,EAAUR,EAAOa,QAAQX,S,qBCFhEY,IAAQC,IAAIC,IAAaC,KAmBVC,MAjBf,WAAiB,IAAD,EACgBX,mBAAS,GADzB,mBACPC,EADO,KACEC,EADF,KAEd,OACE,yBACEG,UAAU,YACVF,QAAS,SAACC,GAAD,OAAWF,EAAWD,EAAU,IACzCW,MAAO,CAAEC,gBAAiBpB,EAAOQ,EAAUR,EAAOa,QAAQV,aAE1D,kBAAC,IAAD,CAAiBkB,KAAM,CAAC,MAAO,cAAeC,KAAK,OAEnD,wBAAIV,UAAU,SACZ,kBAAC,EAAD,SCVOW,MATf,WACE,OACE,yBAAKX,UAAU,QACb,wBAAIA,UAAU,SAAd,iBACA,kBAAC,EAAD,QCKSY,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f05b9d47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Benjamin-Franklin.8ee2cad4.jfif\";","module.exports = __webpack_public_path__ + \"static/media/Nelson-Mandela.fbd20497.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Eleanor-Roosevelt.2ea84f05.jfif\";","module.exports = __webpack_public_path__ + \"static/media/Arystoteles.36e3605a.jfif\";","module.exports = __webpack_public_path__ + \"static/media/Walt_Disney_1946.af2400dd.JPG\";","module.exports = __webpack_public_path__ + \"static/media/James-Cameron-2012.fd57c25c.jpg\";","export const QUOTES = [\r\n  {\r\n    quote:\r\n      \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\r\n    name: \"Benjamin Franklin\",\r\n    background: \"#663399\",\r\n    src: require(\"./assets/images/Benjamin-Franklin.jfif\"),\r\n  },\r\n  {\r\n    quote:\r\n      \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\r\n    name: \"Nelson Mandela\",\r\n    background: \"#6A5ACD\",\r\n    src: require(\"./assets/images/Nelson-Mandela.jpg\"),\r\n  },\r\n  {\r\n    quote:\r\n      \"The future belongs to those who believe in the beauty of their dreams.\",\r\n    name: \"Eleanor Roosevelt\",\r\n    background: \"#008080\",\r\n    src: require(\"./assets/images/Eleanor-Roosevelt.jfif\"),\r\n  },\r\n  {\r\n    quote:\r\n      \"It is during our darkest moments that we must focus to see the light.\",\r\n    name: \"Aristotle\",\r\n    background: \"#2E8B57\",\r\n    src: require(\"./assets/images/Arystoteles.jfif\"),\r\n  },\r\n  {\r\n    quote: \"The way to get started is to quit talking and begin doing.\",\r\n    name: \"Walt Disney\",\r\n    background: \"#6B8E23\",\r\n    src: require(\"./assets/images/Walt_Disney_1946.JPG\"),\r\n  },\r\n  {\r\n    quote:\r\n      \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\",\r\n    name: \"James Cameron\",\r\n    background: \"#20B2AA\",\r\n    src: require(\"./assets/images/James-Cameron-2012.jpg\"),\r\n  },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport { QUOTES } from \"../../constants\";\r\n\r\nfunction Quote() {\r\n  const [counter, setCounter] = useState(4);\r\n  return (\r\n    <div onClick={(event) => setCounter(counter + 1)}>\r\n      <h2 className=\"quote\">{QUOTES[counter % QUOTES.length].quote}</h2>\r\n\r\n      <div className=\"box\">\r\n        <img className=\"photo\" src={QUOTES[counter % QUOTES.length].src} />\r\n        <h3 className=\"author\">{QUOTES[counter % QUOTES.length].name}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quote;\r\n","import React, { useState } from \"react\";\r\nimport Quote from \"../Quote/Quote\";\r\nimport { QUOTES } from \"../../constants\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\n\r\nimport { fas, faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faQuoteLeft, fas);\r\n\r\nfunction Card() {\r\n  const [counter, setCounter] = useState(4);\r\n  return (\r\n    <div\r\n      className=\"container\"\r\n      onClick={(event) => setCounter(counter + 1)}\r\n      style={{ backgroundColor: QUOTES[counter % QUOTES.length].background }}\r\n    >\r\n      <FontAwesomeIcon icon={[\"fas\", \"quote-left\"]} size=\"4x\" />\r\n\r\n      <h2 className=\"quote\">\r\n        <Quote />\r\n      </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <div className=\"main\">\r\n      <h1 className=\"title\">Quote Machine</h1>\r\n      <Card />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}